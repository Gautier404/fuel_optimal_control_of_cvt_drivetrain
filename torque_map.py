import numpy as np
import plotly.graph_objects as go
from scipy.optimize import curve_fit
from input_data import *
  


# Generate sample data (replace this with your own data)
throttle_percentages = np.linspace(0, 100, 10, dtype=float)
engine_rpms = np.linspace(1000, 5000, 10, dtype=float)
engine_torques = np.random.rand(10, 10) * 100  # Replace this with your actual torque data

# Create a meshgrid
throttle_grid, rpm_grid = np.meshgrid(throttle_percentages, engine_rpms)

throttle_grid = throttle_grid.flatten()
rpm_grid = rpm_grid.flatten()
engine_torques = engine_torques.flatten()
print(throttle_grid)
print(rpm_grid)

def func(xy, a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p): 
    x, y = xy 
    return a + b*(x+k) + c*(y+l) + d*(x+m)**2 + e*(y+n)**2 + f*x*y + g*(x+o)**3 + h*(y+p)**3 + i*x**2*y + j*x*y**2

# Perform curve fitting 
popt, pcov = curve_fit(func, (throttle_grid, rpm_grid), engine_torques) 
  
# Print optimized parameters 
print(popt)

# plot the surface generated by the fitted function
x = np.linspace(0, 100, 100)
y = np.linspace(800, 5000, 100)
X, Y = np.meshgrid(x, y)
Z = func((X, Y), *popt)
fig = go.Figure(data=[go.Surface(z=Z, x=x, y=y)])
fig.update_layout(title='torque, rpm, throttle map', xaxis_title='throttle, %', yaxis_title='rpm')
fig.show()
